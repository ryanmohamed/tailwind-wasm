<div class="relative w-full h-full overflow-hidden">
    <div class="flex h-full transition-transform duration-500 ease-in-out"
         style="transform: translateX(@(-(ActiveIndex * 100))%);">
        @ChildContent
    </div>

    <button class="absolute left-2 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow"
            @onclick="PreviousSlide">‹</button>
    <button class="absolute right-2 top-1/2 -translate-y-1/2 bg-white p-2 rounded-full shadow"
            @onclick="NextSlide">›</button>

    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
        @for (int i = 0; i < SlideCount; i++)
        {
            var idx = i;
            <button class="@($"w-3 h-3 rounded-full transition-colors {IndicatorClass(i)}")"
                    @onclick=@(() => SetActiveSlide(idx))></button>
        }
    </div>
</div>

@code {
    private int ActiveIndex { get; set; } = 0;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int SlideCount { get; set; }

    private void NextSlide()
    {
        ActiveIndex = (ActiveIndex + 1) % SlideCount; // Loops back to 0 if at the last slide
    }

    private void PreviousSlide()
    {
        ActiveIndex = (ActiveIndex - 1 + SlideCount) % SlideCount; // Handles negative index wrap-around
    }

    private void SetActiveSlide(int index = 0)
    {
        Console.WriteLine(index);
        ActiveIndex = index % SlideCount;
    }

    private string IndicatorClass(int index) =>
        index == ActiveIndex ? "bg-default-tertiary ring ring-2 ring-default-secondary " : "bg-gray-300";
}
