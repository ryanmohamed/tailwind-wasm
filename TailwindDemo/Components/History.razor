<Slide Class="h-full w-full overflow-hidden">
    <Carousel SlideCount="6">

        <!-- Slide 1: The Chaos of Early CSS -->
        <div class="carousel-slide flex flex-col sm:flex-row gap-8 justify-center sm:items-center bg-default-primary text-default-bg relative overflow-hidden">
            <div>
                <h2 class="text-4xl md:text-6xl font-display pb-2 border-b-2 border-default-secondary">The Chaos of Early CSS</h2>
                <p class="mt-4 text-lg max-w-md">
                    Before CSS frameworks, developers battled a plethora of UI challenges.
                </p>
                <ul class="mt-4 list-disc list-inside">
                    <li>Inconsistent Browser Behavior</li>
                    <li>Lack of Layout Control</li>
                    <li>Inconsistent Styling Management</li>
                    <li>Limited Typography</li>
                    <li>Performance Issues</li>
                </ul>
            </div>
            <div class="w-full flex flex-col gap-4">
                <div class="overflow-hidden relative w-full h-36 p-2 pt-8 bg-slate-500 rounded-md">
                    <div class="absolute top-0 left-0 w-full bg-slate-800 h-6">
                        <div class="gap-2 flex items-center absolute top-1/2 -translate-y-1/2 left-2 h-4">
                            <div class="h-2 w-2 rounded-full bg-green-700"></div>
                            <div class="h-2 w-2 rounded-full bg-yellow-700"></div>
                            <div class="h-2 w-2 rounded-full bg-red-700"></div>
                        </div>
                    </div>
                    <div class="grid grid-cols-3 grid-rows-2 bg-white h-full w-full rounded-md">
                        <div class="row-span-2 col-span-1 border-2 border-red-500 bg-gradient-to-r from-red-900 to-red-500"></div>
                        <div class="row-span-1 col-span-2 border-2 border-green-500 bg-gradient-to-r from-green-900 to-green-500"></div>
                        <div class="row-span-1 col-span-2 border-2 border-blue-500 bg-gradient-to-r from-blue-900 to-blue-500"></div>
                    </div>
                </div>

                <div class="overflow-hidden relative w-full h-36 p-2 pt-8 bg-blue-500 rounded-md">
                    <div class="absolute top-0 left-0 w-full bg-slate-800 h-6">
                        <div class="gap-2 flex items-center absolute top-1/2 -translate-y-1/2 left-2 h-4">
                            <div class="h-2 w-2 rounded-full bg-green-700"></div>
                            <div class="h-2 w-2 rounded-full bg-yellow-700"></div>
                            <div class="h-2 w-2 rounded-full bg-red-700"></div>
                        </div>
                    </div>
                    <div class="grid grid-cols-3 grid-rows-2 bg-default-primary h-full w-full rounded-md">
                        <div class="animate-spin row-span-2 col-span-1 border-2 border-red-500 bg-gradient-to-r from-red-900 to-red-500"></div>
                        <div class="animate-shrink checked:row-span-1 col-span-2 border-2 border-green-500 bg-gradient-to-r from-green-900 to-green-500"></div>
                        <div class="animate-slide row-span-1 col-span-2 border-2 border-blue-500 bg-gradient-to-r from-blue-900 to-blue-500"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Slide 2: Eric Meyer’s CSS Reset -->
        <div class="carousel-slide flex flex-col items-center justify-center bg-gray-50 text-default-primary relative overflow-hidden">
            <div>
                <h2 class="text-5xl font-display mb-4">CSS Reset: Bringing Order</h2>
                <p class="text-lg max-w-2xl text-center mb-8">
                    In 2004, Eric Meyer introduced CSS resets to wipe away browser defaults, giving developers a <strong>clean slate</strong>.
                </p>
            </div>
            <div class="animate-fade text-7xl inset-0 z-10 leading-tight text-justify font-bold font-sans opacity-50 absolute top-0 left-0 w-full h-full z-10">
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin hendrerit, lacus quis tristique eleifend, elit lacus ornare felis, eget hendrerit ipsum velit id turpis. Curabitur et ullamcorper ex. Morbi nec felis dapibus, tincidunt dolor et, vehicula libero. Etiam eu dolor lobortis mauris ultricies scelerisque eget in lorem. Integer ultricies vulputate turpis a malesuada. Vestibulum tempor ex nisi, eget lacinia justo mattis id. Sed tempus rhoncus aliquet. Suspendisse vitae faucibus mi, ultricies imperdiet nisi. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.

                Phasellus commodo elit lobortis, elementum quam ac, ultrices lacus. Aenean et fermentum ex. Aenean dignissim orci tortor, non efficitur ex commodo sit amet. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ultricies nibh at sapien ullamcorper sollicitudin. Phasellus nec tortor fringilla magna suscipit dignissim quis nec dui. Etiam nec felis at nisl dictum vulputate. Nam eleifend, augue ut semper dictum, arcu sem pulvinar nisi, sit amet tempor turpis lectus vitae ligula. Nulla in auctor neque. Vivamus dignissim eros metus, ac interdum ligula sagittis at. Phasellus at libero molestie, hendrerit ante ac, fringilla dui.

                Mauris viverra imperdiet enim in aliquam. Nulla viverra tincidunt justo, at porta ex vestibulum in. Sed cursus sodales egestas. Vestibulum enim nisi, finibus ut molestie non, auctor sit amet sem. Sed massa nisl, vulputate at elit id, accumsan cursus metus. Sed consequat imperdiet fringilla. Praesent suscipit scelerisque gravida. Nulla luctus efficitur mauris, volutpat rutrum augue sodales nec. Quisque dictum ultrices lacus, sit amet pulvinar enim vehicula quis. Phasellus ac finibus velit, at sollicitudin urna. Proin maximus mi eget pellentesque rutrum.

                Nam lacinia tortor ut nulla imperdiet, et ultrices libero pulvinar. Phasellus vehicula ultricies aliquet. In nec tellus at tellus auctor vehicula ac vel lacus. Phasellus a pulvinar ante. Nullam maximus justo dui, eu mattis ipsum sagittis eu. Aliquam a dolor tortor. Aliquam erat volutpat.

                Aliquam quis neque faucibus sapien malesuada bibendum in ac odio. Donec eget ex ut est blandit consequat. Vestibulum tincidunt felis eu ex feugiat, at auctor velit suscipit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus a interdum sem. Donec nec sagittis orci. Ut pulvinar mauris vitae varius sodales. Pellentesque vulputate ac diam eu vestibulum. Ut ut metus nec lorem pulvinar pulvinar at ac sem. Integer sodales faucibus maximus. Duis et enim nec urna pharetra vulputate.</p>
            </div>
        </div>

        <!-- Slide 3: Early Frameworks – Blueprint, 960 Grid, YAML -->
        <div class="carousel-slide bg-default-primary text-white flex flex-col justify-center py-10">
            <div class="h-full w-full">
                <h2 class="text-5xl font-display mb-4">Early CSS Frameworks</h2>
                <p class="mb-4">As web development became more complex from 2007-2010, the demand for reusable and standardized design elements grew. This period saw the birth of early CSS frameworks.</p>
                <div class="w-full h-full grid grid-cols-10 grid-rows-10 gap-6">
                    <div class="col-span-10 row-span-2 sm:row-span-6 sm:col-span-3 bg-default-secondary p-6 rounded-lg shadow-md">
                        <h3 class="text-2xl font-display">Blueprint CSS</h3>
                        <p class="mt-2">Helped developers align designs using a grid system and typography presets.</p>
                    </div>
                    <div class="col-span-10 row-span-3 sm:row-span-6 sm:col-span-7 flex flex-col bg-default-bg text-default-primary p-6 rounded-lg shadow-md">
                        <h3 class="text-2xl font-display">960 Grid</h3>
                        <p class="mb-2">Popularized the 12-column layout, simplifying structured designs.</p>
                        <div class="rounded-md overflow-hidden w-full h-full flex flex-row gap-2">
                            <div class="h-full w-1/12 bg-slate-100"></div>
                            <div class="h-full w-1/12 bg-slate-200"></div>
                            <div class="h-full w-1/12 bg-slate-300"></div>
                            <div class="h-full w-1/12 bg-slate-400"></div>
                            <div class="h-full w-1/12 bg-slate-500"></div>
                            <div class="h-full w-1/12 bg-slate-600"></div>
                            <div class="h-full w-1/12 bg-slate-700"></div>
                            <div class="h-full w-1/12 bg-slate-800"></div>
                            <div class="h-full w-1/12 bg-slate-900"></div>
                            <div class="h-full w-1/12 bg-slate-950"></div>
                            <div class="h-full w-1/12 bg-stone-800"></div>
                            <div class="h-full w-1/12 bg-stone-700"></div>
                        </div>
                    </div>
                    <div class="hidden sm:block col-span-3 row-span-2 flex-grow bg-default-bg p-6 rounded-lg shadow-md">
                    </div>
                    <div class="col-span-10 row-span-2 sm:col-start-4 smnrow-span-1 sm:col-span-7 flex-grow bg-default-secondary p-6 rounded-lg shadow-md">
                        <h3 class="text-2xl font-display">YAML</h3>
                        <p class="mt-2">Pioneered responsive concepts with multi-column layouts.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Slide 4: Bootstrap – Mobile-First Design -->
        <div class="carousel-slide bg-default-primary text-white flex flex-col justify-center">
            <h2 class="text-5xl font-display mb-6">Bootstrap: The Mobile-First Framework</h2>
            <p class="mb-4">Developed by Twitter in 2011, Bootstrap was revolutionary for providing pre-built components (buttons, forms, modals) and responsive grids. It became the most popular framework because of</p>
            <ul class="list-disc list-inside mb-4">
                <li>Cross-browser compatibility.</li>
                <li>Mobile-first approach.</li>
                <li>Responsive grid system.</li>
                <li>Pre-styled components like buttons, navigation bars, and forms.</li>
                <li>JavaScript plugins for interactive elements.</li>
            </ul>
            <div class="flex flex-col gap-4">
                <div class="bg-slate-800 p-2 text-center rounded-lg w-full">col-12</div>
                <div class="bg-slate-700 p-2 text-center rounded-lg w-3/4">col-9</div>
                <div class="bg-slate-600 p-2 text-center rounded-lg w-1/2">col-6</div>
                <div class="bg-slate-500 p-2 text-center rounded-lg w-1/4">col-3</div>
                <div class="bg-slate-400 p-2 text-center rounded-lg w-1/6">col-2</div>
                <div class="bg-slate-300 p-2 text-sm text-center rounded-lg w-1/12">col-1</div>
            </div>
        </div>

        <!-- Slide 5: Semantic UI – Meaningful Class Names -->
        <div class="carousel-slide flex flex-col items-center justify-center bg-default-primary text-white p-12">
            <h2 class="text-5xl font-display mb-4">Semantic UI</h2>
            <p class="text-lg text-center max-w-2xl mb-8">
                Semantic UI introduced readable classes like <code>button</code> and <code>card</code>, bridging the gap between designers and developers.
            </p>
            <div class="flex flex-col sm:flex-row items-center justify-center gap-4">
                <div class="border border-default-secondary rounded-md p-2 h-full grid place-items-center">
                    <code>@("<button class=\"ui primary button\">Save</button>")</code>
                </div>
                <button class="semantic-ui-button">
                    Save
                </button>
            </div>
        </div>

        <!-- Slide 6: Tailwind CSS – Utility-First Flexibility -->
        <div class="carousel-slide flex flex-col items-center justify-center bg-default-bg text-default-primary">
            <h2 class="text-5xl font-display mb-6 text-center">Tailwind: Customize Everything</h2>
            <p class="text-lg text-center max-w-2xl mb-8">
                Tailwind embraces <strong>utility-first</strong> styling, empowering developers to build <strong>highly customized</strong> designs effortlessly.
            </p>
            <div class="mb-4 text-center">
                    <code>@($"<button class=\"{CurrentStyle.Padding} {CurrentStyle.Border} {CurrentStyle.Font} ...\">Save</button>")</code>
                </div>

            <div class="text-xs @CurrentStyle.Padding @CurrentStyle.Border @CurrentStyle.Font border-default-tertiary bg-default-secondary rounded-md text-default-bg py-2 hover:bg-default-tertiary hover:cursor-pointer">
                Save
            </div>
            <div class="flex space-x-4 mt-10">
                <button onclick="@ChoosePadding" class="font-semibold pb-1 border-b-2 border-default-primary hover:border-default-secondary transition-200 text-default-primary">Padding</button>
                <button onclick="@ChooseBorder" class="font-semibold pb-1 border-b-2 border-default-primary hover:border-default-secondary transition-200 text-default-primary">Border Size</button>
                <button onclick="@ChooseFont" class="font-semibold pb-1 border-b-2 border-default-primary hover:border-default-secondary transition-200 text-default-primary">Font Weight</button>
            </div>
        </div>
    </Carousel>
</Slide>


@code {
    public Style CurrentStyle { get; set; } = new Style();

    public List<string> Paddings = ["px-2", "px-4", "px-6"];
    public List<string> Borders = ["border-2", "border-3", "border-4"];
    public List<string> Fonts = ["font-medium", "font-semibold", "font-bold"];

    public void ChoosePadding () {
        CurrentStyle.Padding = Paddings.ElementAt((Paddings.IndexOf(CurrentStyle.Padding) + 1)  % Paddings.Count());
        StateHasChanged();
    }

    public void ChooseBorder () {
        CurrentStyle.Border = Borders.ElementAt((Borders.IndexOf(CurrentStyle.Border) + 1)  % Borders.Count());
        StateHasChanged();
    }

    public void ChooseFont () {
        CurrentStyle.Font = Fonts.ElementAt((Fonts.IndexOf(CurrentStyle.Font) + 1)  % Fonts.Count());
        StateHasChanged();
    }

    public class Style {
        public string Padding { get; set; } = "p-2";
        public string Border { get; set; } = "border-2";
        public string Font { get; set; } = "font-medium";
    }
}